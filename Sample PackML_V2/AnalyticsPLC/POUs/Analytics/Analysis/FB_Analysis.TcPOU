<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Productversion="">
  <POU Name="FB_Analysis" Id="3057e627-6a54-45e6-8b34-817e9f7583ec" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Analysis
VAR_INPUT
	nConfigurationID: INT;
	ipVirtualInputSource: I_V1_VirtualInputSource;
	
END_VAR
VAR_OUTPUT
	bError: BOOL;
	ipTcResult: I_TcMessage := fbTcMsgSuccess;
END_VAR
VAR
	fbTcMsgSuccess: FB_TcMessageSuccess;
	
	R_TRIG_Reset: R_TRIG;
	bResetBusy: BOOL;
	
	fbN1_OEEStatus: FB_N1_OEEStatus;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Reset" Id="a9feb18c-dfe0-490c-bb8b-b187fe1e2987">
      <Declaration><![CDATA[METHOD Reset : BOOL
VAR_IN_OUT
	stReset: ST_AnalysisReset;
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
R_TRIG_Reset(CLK:= stReset.bResetExecute);
IF R_TRIG_Reset.Q OR bResetBusy THEN
	bResetBusy:= TRUE;

	CASE stReset.eResetComponent OF
		E_AnalysisComponents.All:
			bResetBusy:= bResetBusy AND fbN1_OEEStatus.Reset();
		E_AnalysisComponents.N1_OEEStatus:
			bResetBusy:= bResetBusy AND fbN1_OEEStatus.Reset();
		E_AnalysisComponents.N1_M1_OverallEquipmentEffectivenessOEE:
			bResetBusy:= bResetBusy AND fbN1_OEEStatus.fbM1_OverallEquipmentEffectivenessOEE.Reset();
		E_AnalysisComponents.N1_M2_ProductionModeTimingAnalysis:
			bResetBusy:= bResetBusy AND fbN1_OEEStatus.fbM2_ProductionModeTimingAnalysis.Reset();
		E_AnalysisComponents.N1_M3_OEETrendLine:
			bResetBusy:= bResetBusy AND fbN1_OEEStatus.fbM3_OEETrendLine.Reset();
		E_AnalysisComponents.N1_M4_ProductionQuantityAnalysis:
			bResetBusy:= bResetBusy AND fbN1_OEEStatus.fbM4_ProductionQuantityAnalysis.Reset();
		E_AnalysisComponents.N1_M5_ProductivityInterval:
			bResetBusy:= bResetBusy AND fbN1_OEEStatus.fbM5_ProductivityInterval.Reset();
		E_AnalysisComponents.V1_VirtualInputSource:
			bResetBusy:= bResetBusy AND fbN1_OEEStatus.fbM1_OverallEquipmentEffectivenessOEE.Reset();
			bResetBusy:= bResetBusy AND fbN1_OEEStatus.fbM2_ProductionModeTimingAnalysis.Reset();
			bResetBusy:= bResetBusy AND fbN1_OEEStatus.fbM3_OEETrendLine.Reset();
			bResetBusy:= bResetBusy AND fbN1_OEEStatus.fbM4_ProductionQuantityAnalysis.Reset();
			bResetBusy:= bResetBusy AND fbN1_OEEStatus.fbM5_ProductivityInterval.Reset();
	END_CASE

	bResetBusy:= NOT bResetBusy;

	stReset.bResetExecute:= bResetBusy;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Call" Id="da555bb0-a1bf-4246-9455-5e8294281b73">
      <Declaration><![CDATA[METHOD Call : BOOL
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//Analytics Network "OEEStatus" with ID: 1
fbN1_OEEStatus.Call(THIS);


//Error Handling
IF fbN1_OEEStatus.bError THEN
	bError:= TRUE;
	ipTcResult:= fbN1_OEEStatus.ipTcResult;
ELSE
	bError:= FALSE;
	ipTcResult:= fbTcMsgSuccess;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetHMIValues" Id="bbffb5e8-20d7-4cd3-928d-559bc51bc45c">
      <Declaration><![CDATA[METHOD SetHMIValues : BOOL
VAR_INPUT
	nContentID: DINT;
	pContent: PVOID;
	bHMIReinit: BOOL;
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE nContentID OF
	1:
		SetHMIValues:= fbN1_OEEStatus.fbM1_OverallEquipmentEffectivenessOEE.SetHMI(1, pContent, bHMIReinit);
		SetHMIValues:= SetHMIValues AND fbN1_OEEStatus.fbM3_OEETrendLine.SetHMI(1, pContent, bHMIReinit);
		SetHMIValues:= SetHMIValues AND fbN1_OEEStatus.fbM4_ProductionQuantityAnalysis.SetHMI(1, pContent, bHMIReinit);
		SetHMIValues:= SetHMIValues AND fbN1_OEEStatus.fbM5_ProductivityInterval.SetHMI(1, pContent, bHMIReinit);
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetHMIValues" Id="21901a64-72d4-4895-9852-52f2474d5d38">
      <Declaration><![CDATA[METHOD GetHMIValues : BOOL
VAR_INPUT
	nContentID: DINT;
	pContent: PVOID;
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE nContentID OF
	1:
		GetHMIValues:= fbN1_OEEStatus.fbM1_OverallEquipmentEffectivenessOEE.GetHMI(1, pContent);
		GetHMIValues:= GetHMIValues OR fbN1_OEEStatus.fbM3_OEETrendLine.GetHMI(1, pContent);
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="nContext" Id="69e30036-5220-4785-b5a7-a2b50fb77990">
      <Declaration><![CDATA[PROPERTY nContext : DWORD]]></Declaration>
      <Get Name="Get" Id="d436ab24-f013-4f6b-a1fc-228702041096">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[
nContext:= 0;
IF ipVirtualInputSource <> 0 THEN
	nContext:= ipVirtualInputSource.nContext;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>