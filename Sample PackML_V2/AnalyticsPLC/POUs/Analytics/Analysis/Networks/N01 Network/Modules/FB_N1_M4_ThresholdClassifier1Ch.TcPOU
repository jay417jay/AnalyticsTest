<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Productversion="">
  <POU Name="FB_N1_M4_ThresholdClassifier1Ch" Id="d5b74ce9-0d7d-4972-a042-ad0b5be5ae6c" SpecialFunc="None">
    <Declaration><![CDATA[//The Threshold Classifier 1Ch classifies the input values into three different classes: OK, Warning and Alarm according to the configured thresholds. Optional a boolean signal for Enable Execution can be selected, so that the algorithm is just active if the value of the selected signal is TRUE.
FUNCTION_BLOCK FB_N1_M4_ThresholdClassifier1Ch
VAR_INPUT
	fDataIn: LREAL;
	tTimestamp: ULINT;
	bEnableExecution: BOOL := TRUE;
	bReset: BOOL;
	bReconfigure: BOOL := TRUE;
END_VAR
VAR_INPUT PERSISTENT
	fThresholdLevelOkWarning: LREAL;
	fThresholdLevelWarningAlarm: LREAL;
	fTolerance: LREAL;
END_VAR
VAR_OUTPUT
	bError: BOOL;
	ipTcResult: I_TcMessage;
	bNewResult: BOOL;
	eClass: E_ALY_Classification_3Cls;
	fbTimeLastEventWarning: FB_ALY_DateTime;
	fbTimeLastEventAlarm: FB_ALY_DateTime;
END_VAR
VAR
	
	R_TRIG_Reconfigure: R_TRIG;
	
	fbALY_ThresholdClassificator_1Ch: FB_ALY_ThresholdClassificator_1Ch;
END_VAR
VAR PERSISTENT
	bConfigured: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Call" Id="5a592f36-1dc6-454e-97cf-d5abf696fc0a">
      <Declaration><![CDATA[METHOD Call : BOOL
VAR_INPUT
	nCurrentContext: DWORD;
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bConfigured THEN
	bConfigured:= TRUE;

	fThresholdLevelOkWarning:= 90;
	fThresholdLevelWarningAlarm:= 75;
	fTolerance:= 0;

	fbALY_ThresholdClassificator_1Ch.fTolerance:= fTolerance;
END_IF

R_TRIG_Reconfigure(CLK:= bReconfigure);
IF R_TRIG_Reconfigure.Q THEN
	fbALY_ThresholdClassificator_1Ch.Configure(fThresholdLevelOkWarning:= fThresholdLevelOkWarning, fThresholdLevelWarningAlarm:= fThresholdLevelWarningAlarm);

	bReconfigure:= FALSE;
END_IF

IF bReset THEN
	Reset();
END_IF

IF bEnableExecution THEN
	IF F_HasContext(nCurrentContext, nContext) THEN
		fbALY_ThresholdClassificator_1Ch.SetChannelValue(Input:= fDataIn);

		fbALY_ThresholdClassificator_1Ch.Call(tTimestamp:= tTimestamp);

		bNewResult:= fbALY_ThresholdClassificator_1Ch.bNewResult;
		eClass:= fbALY_ThresholdClassificator_1Ch.eClass;
		fbTimeLastEventWarning:= fbALY_ThresholdClassificator_1Ch.fbTimeLastEventWarning;
		fbTimeLastEventAlarm:= fbALY_ThresholdClassificator_1Ch.fbTimeLastEventAlarm;

		bError:= fbALY_ThresholdClassificator_1Ch.bError;
		ipTcResult:= fbALY_ThresholdClassificator_1Ch.ipResultMessage;
	END_IF
ELSE
	bNewResult:= FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="54ce5f53-e7fc-4264-94f3-34945f739c27">
      <Declaration><![CDATA[METHOD Reset : BOOL
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Reset:= fbALY_ThresholdClassificator_1Ch.Reset();

bNewResult:= fbALY_ThresholdClassificator_1Ch.bNewResult;
eClass:= fbALY_ThresholdClassificator_1Ch.eClass;
fbTimeLastEventWarning:= fbALY_ThresholdClassificator_1Ch.fbTimeLastEventWarning;
fbTimeLastEventAlarm:= fbALY_ThresholdClassificator_1Ch.fbTimeLastEventAlarm;

bError:= NOT Reset;
ipTcResult:= fbALY_ThresholdClassificator_1Ch.ipResultMessage;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetHMI" Id="8c9e0f73-8e52-4d3c-b8f3-1c1cbe4f2131">
      <Declaration><![CDATA[METHOD SetHMI : BOOL
VAR_INPUT
	nContent: DINT;
	pContent: PVOID;
	bHMIReinit: BOOL;
END_VAR
VAR
	pHMI_C1_Network: POINTER TO ST_HMI_C1_Network;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SetHMI:= FALSE;

CASE nContent OF
	1:
		pHMI_C1_Network:= pContent;

		IF bHMIReinit AND bConfigured THEN
			SetHMI:= TRUE;
		END_IF

		pHMI_C1_Network^.stHMI_C1_Ctrl3_Threshold_Classifier_1Ch.fM4_fDataIn:= fDataIn;
		pHMI_C1_Network^.stHMI_C1_Ctrl3_Threshold_Classifier_1Ch.eM4_eClass:= eClass;
		pHMI_C1_Network^.stHMI_C1_Ctrl3_Threshold_Classifier_1Ch.tM4_fbTimeLastEventWarning:= F_RawTimeToDCTimestruct(nRaw:= fbTimeLastEventWarning.nRaw, nUtcTimeBias:= -480);; //UTC Offset [(UTC+08:00) Kuala Lumpur, Singapore]
		pHMI_C1_Network^.stHMI_C1_Ctrl3_Threshold_Classifier_1Ch.tM4_fbTimeLastEventAlarm:= F_RawTimeToDCTimestruct(nRaw:= fbTimeLastEventAlarm.nRaw, nUtcTimeBias:= -480);; //UTC Offset [(UTC+08:00) Kuala Lumpur, Singapore]
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetHMI" Id="dbe76406-d27e-4358-9178-2d3019b62edc">
      <Declaration><![CDATA[METHOD GetHMI : BOOL
VAR_INPUT
	nContent: DINT;
	pContent: PVOID;
END_VAR
VAR
	pHMI_C1_Network: POINTER TO ST_HMI_C1_Network;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE nContent OF
	1:
		//Network
		pHMI_C1_Network:= pContent;

		IF pHMI_C1_Network^.stHMI_C1_Ctrl3_Threshold_Classifier_1Ch.bTrigReconfigure THEN
			pHMI_C1_Network^.stHMI_C1_Ctrl3_Threshold_Classifier_1Ch.bTrigReconfigure:= FALSE;
			bReconfigure:= TRUE;

		END_IF
END_CASE

GetHMI:= bReconfigure;]]></ST>
      </Implementation>
    </Method>
    <Property Name="nContext" Id="4577a4b9-6f4a-4338-a5c6-c70be4dd003c">
      <Declaration><![CDATA[PROPERTY nContext : DWORD]]></Declaration>
      <Get Name="Get" Id="1fc53769-01bb-441e-8fd5-a1192b4c49fb">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[nContext:= E_VirtualInput.eContext_V1_VirtualInputSource;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>