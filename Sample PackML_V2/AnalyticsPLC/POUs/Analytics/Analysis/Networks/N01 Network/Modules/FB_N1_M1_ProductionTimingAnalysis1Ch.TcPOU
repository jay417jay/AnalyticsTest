<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Productversion="">
  <POU Name="FB_N1_M1_ProductionTimingAnalysis1Ch" Id="54aa7170-21bf-4c53-92ee-c1329a8c7510" SpecialFunc="None">
    <Declaration><![CDATA[//The Timing Analysis 1Ch measures time difference between on- and off-periods and counts the amount of on-periods. The on-period starts when the condition of operator and threshold is met. Optional a boolean signal for Enable Execution can be selected, so that the algorithm is just active if the value of the selected signal is TRUE.
FUNCTION_BLOCK FB_N1_M1_ProductionTimingAnalysis1Ch
VAR_INPUT
	nDataIn: DINT;
	tTimestamp: ULINT;
	bEnableExecution: BOOL := TRUE;
	bReset: BOOL;
	bReconfigure: BOOL := TRUE;
END_VAR
VAR_INPUT PERSISTENT
	stThresholdLevelOn: ST_ALY_Threshold;
	fTolerance: LREAL;
END_VAR
VAR_OUTPUT
	bError: BOOL;
	ipTcResult: I_TcMessage;
	bNewResult: BOOL;
	bIsOn: BOOL;
	nCountOn: ULINT;
	fbTimeCurrentInterval: FB_ALY_TimeSpan;
	fbTimeOnTotal: FB_ALY_TimeSpan;
	fbTimeOffTotal: FB_ALY_TimeSpan;
	fbTimeLastInterval: FB_ALY_TimeSpan;
END_VAR
VAR
	
	R_TRIG_Reconfigure: R_TRIG;
	
	fbALY_TimingAnalysis_1Ch: FB_ALY_TimingAnalysis_1Ch;
END_VAR
VAR PERSISTENT
	bConfigured: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Call" Id="8dd5560c-75eb-498c-b966-fa2396cc4874">
      <Declaration><![CDATA[METHOD Call : BOOL
VAR_INPUT
	nCurrentContext: DWORD;
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bConfigured THEN
	bConfigured:= TRUE;

	fTolerance:= 0;

	stThresholdLevelOn.eComparisonOperator:= E_ALY_ComparisonOperator.Equals;
	stThresholdLevelOn.fThreshold:= 1;

	fbALY_TimingAnalysis_1Ch.fTolerance:= fTolerance;
END_IF

R_TRIG_Reconfigure(CLK:= bReconfigure);
IF R_TRIG_Reconfigure.Q THEN
	fbALY_TimingAnalysis_1Ch.ConfigureChannel(stThresholdLevel:= stThresholdLevelOn);

	fbALY_TimingAnalysis_1Ch.Configure();

	bReconfigure:= FALSE;
END_IF

IF bReset THEN
	Reset();
END_IF

IF bEnableExecution THEN
	IF F_HasContext(nCurrentContext, nContext) THEN
		fbALY_TimingAnalysis_1Ch.SetChannelValue(Input:= nDataIn);

		fbALY_TimingAnalysis_1Ch.Call(tTimestamp:= tTimestamp);

		bNewResult:= fbALY_TimingAnalysis_1Ch.bNewResult;
		bIsOn:= fbALY_TimingAnalysis_1Ch.bIsOn;
		nCountOn:= fbALY_TimingAnalysis_1Ch.nCountOn;
		fbTimeCurrentInterval:= fbALY_TimingAnalysis_1Ch.fbTimeCurrentInterval;
		fbTimeOnTotal:= fbALY_TimingAnalysis_1Ch.fbTimeOnTotal;
		fbTimeOffTotal:= fbALY_TimingAnalysis_1Ch.fbTimeOffTotal;
		fbTimeLastInterval:= fbALY_TimingAnalysis_1Ch.fbTimeLastInterval;

		bError:= fbALY_TimingAnalysis_1Ch.bError;
		ipTcResult:= fbALY_TimingAnalysis_1Ch.ipResultMessage;
	END_IF
ELSE
	bNewResult:= FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="a5100746-75bf-45ef-a1e0-56634aa7b955">
      <Declaration><![CDATA[METHOD Reset : BOOL
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Reset:= fbALY_TimingAnalysis_1Ch.Reset();

bNewResult:= fbALY_TimingAnalysis_1Ch.bNewResult;
bIsOn:= fbALY_TimingAnalysis_1Ch.bIsOn;
nCountOn:= fbALY_TimingAnalysis_1Ch.nCountOn;
fbTimeCurrentInterval:= fbALY_TimingAnalysis_1Ch.fbTimeCurrentInterval;
fbTimeOnTotal:= fbALY_TimingAnalysis_1Ch.fbTimeOnTotal;
fbTimeOffTotal:= fbALY_TimingAnalysis_1Ch.fbTimeOffTotal;
fbTimeLastInterval:= fbALY_TimingAnalysis_1Ch.fbTimeLastInterval;

bError:= NOT Reset;
ipTcResult:= fbALY_TimingAnalysis_1Ch.ipResultMessage;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetHMI" Id="e24a9bc0-7676-4ad8-945d-8b308b9dc9e8">
      <Declaration><![CDATA[METHOD SetHMI : BOOL
VAR_INPUT
	nContent: DINT;
	pContent: PVOID;
	bHMIReinit: BOOL;
END_VAR
VAR
	pHMI_C1_Network: POINTER TO ST_HMI_C1_Network;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SetHMI:= FALSE;

CASE nContent OF
	1:
		pHMI_C1_Network:= pContent;

		IF bHMIReinit AND bConfigured THEN
			SetHMI:= TRUE;
		END_IF

		pHMI_C1_Network^.stHMI_C1_Ctrl2_Production_Timing_Analysis_1Ch.bM1_bIsOn:= bIsOn;
		pHMI_C1_Network^.stHMI_C1_Ctrl2_Production_Timing_Analysis_1Ch.tM1_fbTimeCurrentInterval:= fbTimeCurrentInterval.stStructured;
		pHMI_C1_Network^.stHMI_C1_Ctrl2_Production_Timing_Analysis_1Ch.tM1_fbTimeOnTotal:= fbTimeOnTotal.stStructured;
		pHMI_C1_Network^.stHMI_C1_Ctrl2_Production_Timing_Analysis_1Ch.tM1_fbTimeOffTotal:= fbTimeOffTotal.stStructured;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetHMI" Id="7798a9dd-8ff5-45d3-9356-68eb68121a82">
      <Declaration><![CDATA[METHOD GetHMI : BOOL
VAR_INPUT
	nContent: DINT;
	pContent: PVOID;
END_VAR
VAR
	pHMI_C1_Network: POINTER TO ST_HMI_C1_Network;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE nContent OF
	1:
		//Network
		pHMI_C1_Network:= pContent;

		IF pHMI_C1_Network^.stHMI_C1_Ctrl2_Production_Timing_Analysis_1Ch.bTrigReconfigure THEN
			pHMI_C1_Network^.stHMI_C1_Ctrl2_Production_Timing_Analysis_1Ch.bTrigReconfigure:= FALSE;
			bReconfigure:= TRUE;

		END_IF
END_CASE

GetHMI:= bReconfigure;]]></ST>
      </Implementation>
    </Method>
    <Property Name="nContext" Id="35782625-15e8-4ffa-a45f-2e57d0940ea3">
      <Declaration><![CDATA[PROPERTY nContext : DWORD]]></Declaration>
      <Get Name="Get" Id="5ee87fac-f6f6-42ac-b64f-0871266995f6">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[nContext:= E_VirtualInput.eContext_V1_127_0_0_1_PackMLPlcStream1_10_00ms;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>