<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Productversion="">
  <POU Name="FB_N1_Network" Id="e3f041a7-ec48-4ff4-bdfd-c50394b1bb14" SpecialFunc="None">
    <Declaration><![CDATA[//Analytics Network "Network" with ID: 1
FUNCTION_BLOCK FB_N1_Network
VAR_INPUT
	fInput_01: LREAL;
END_VAR
VAR_OUTPUT
	bError: BOOL;
	ipTcResult: I_TcMessage := fbTcMsgSuccess;
	fPlastic_Count: LREAL;
END_VAR
VAR
	fbTcMsgSuccess: FB_TcMessageSuccess;
	
	//Modules
	fbM1_PackMLOverallEquipmentEffectivenessOEE: FB_N1_M1_PackMLOverallEquipmentEffectivenessOEE;
	fbM2_ProductionTimingAnalysis1Ch: FB_N1_M2_ProductionTimingAnalysis1Ch;
	fbM3_PieChart: FB_N1_M3_PieChart;
	fbM4_ThresholdClassifier1Ch: FB_N1_M4_ThresholdClassifier1Ch;
	fbM5_PlasticMathOperation: FB_N1_M5_PlasticMathOperation;
	fbM6_PreventiveMaintenanceLifetimeAnalysis: FB_N1_M6_PreventiveMaintenanceLifetimeAnalysis;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Call" Id="2250b9c3-5c48-4791-8a8e-f91253e74b25">
      <Declaration><![CDATA[METHOD Call : BOOL
VAR_INPUT
	pAnalysis: POINTER TO FB_Analysis;
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ValueMapping(pAnalysis);

//The Overall Equipment Effectiveness (OEE) algorithm calculates key values to compare the current manufacturing process with its full potential. Optional a boolean signal for Enable Execution can be selected, so that the algorithm is just active if the value of the selected signal is TRUE.
fbM1_PackMLOverallEquipmentEffectivenessOEE.tOperatingTime:= fbM2_ProductionTimingAnalysis1Ch.fbTimeOnTotal.nRaw;
fbM1_PackMLOverallEquipmentEffectivenessOEE.Call(pAnalysis^.nContext);

//The Timing Analysis 1Ch measures time difference between on- and off-periods and counts the amount of on-periods. The on-period starts when the condition of operator and threshold is met. Optional a boolean signal for Enable Execution can be selected, so that the algorithm is just active if the value of the selected signal is TRUE.
fbM2_ProductionTimingAnalysis1Ch.Call(pAnalysis^.nContext);

//This Module is used for the One-click Dashboard to generate a pie chart from the inputs. Optional the output can be set to be percentaged.
fbM3_PieChart.Call(pAnalysis^.nContext);

//The Threshold Classifier 1Ch classifies the input values into three different classes: OK, Warning and Alarm according to the configured thresholds. Optional a boolean signal for Enable Execution can be selected, so that the algorithm is just active if the value of the selected signal is TRUE.
fbM4_ThresholdClassifier1Ch.fDataIn:= fbM1_PackMLOverallEquipmentEffectivenessOEE.fOEE;
fbM4_ThresholdClassifier1Ch.Call(pAnalysis^.nContext);

//The Math Operation executes a mathematical operation on two or more different input channels and provides the result of the mathematical operation. The operator can be configured individually. Optional a boolean signal for Enable Execution can be selected, so that the algorithm is just active if the value of the selected signal is TRUE.
fbM5_PlasticMathOperation.Call(pAnalysis^.nContext);

//The Lifetime Analysis 1Ch calculates the elapsed and the estimated remaining lifetime of a device. The input channel should provide boolean values so that every switching procedure represents a cycle which can be converted into the elapsed lifetime. Optional a boolean signal for Enable Execution can be selected, so that the algorithm is just active if the value of the selected signal is TRUE.
fbM6_PreventiveMaintenanceLifetimeAnalysis.Call(pAnalysis^.nContext);

//Networkoutput mapping
fPlastic_Count:= fbM5_PlasticMathOperation.fResult;


//Error Handling
IF fbM1_PackMLOverallEquipmentEffectivenessOEE.bError THEN
	bError:= TRUE;
	ipTcResult:= fbM1_PackMLOverallEquipmentEffectivenessOEE.ipTcResult;
ELSIF fbM2_ProductionTimingAnalysis1Ch.bError THEN
	bError:= TRUE;
	ipTcResult:= fbM2_ProductionTimingAnalysis1Ch.ipTcResult;
ELSIF fbM3_PieChart.bError THEN
	bError:= TRUE;
	ipTcResult:= fbM3_PieChart.ipTcResult;
ELSIF fbM4_ThresholdClassifier1Ch.bError THEN
	bError:= TRUE;
	ipTcResult:= fbM4_ThresholdClassifier1Ch.ipTcResult;
ELSIF fbM5_PlasticMathOperation.bError THEN
	bError:= TRUE;
	ipTcResult:= fbM5_PlasticMathOperation.ipTcResult;
ELSIF fbM6_PreventiveMaintenanceLifetimeAnalysis.bError THEN
	bError:= TRUE;
	ipTcResult:= fbM6_PreventiveMaintenanceLifetimeAnalysis.ipTcResult;
ELSE
	bError:= FALSE;
	ipTcResult:= fbTcMsgSuccess;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="b3e28041-21f1-4f98-a9d9-e1c43a01206b">
      <Declaration><![CDATA[METHOD Reset : BOOL
VAR
	bResult: BOOL := TRUE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bResult:= bResult AND fbM1_PackMLOverallEquipmentEffectivenessOEE.Reset();
bResult:= bResult AND fbM2_ProductionTimingAnalysis1Ch.Reset();
bResult:= bResult AND fbM3_PieChart.Reset();
bResult:= bResult AND fbM4_ThresholdClassifier1Ch.Reset();
bResult:= bResult AND fbM5_PlasticMathOperation.Reset();
bResult:= bResult AND fbM6_PreventiveMaintenanceLifetimeAnalysis.Reset();
Reset:= bResult;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ValueMapping" Id="cd8d2c64-dd28-43e8-960f-b93d8e446bf0">
      <Declaration><![CDATA[METHOD PRIVATE ValueMapping : BOOL
VAR_INPUT
	pAnalysis: POINTER TO FB_Analysis;
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//Module fbM1_PackMLOverallEquipmentEffectivenessOEE
fbM1_PackMLOverallEquipmentEffectivenessOEE.tTimestamp:= pAnalysis^.ipVirtualInputSource.tTimestamp;
fbM1_PackMLOverallEquipmentEffectivenessOEE.tScheduledTime:= pAnalysis^.ipVirtualInputSource.nV1_lScheduledTime;
fbM1_PackMLOverallEquipmentEffectivenessOEE.nUnitsProduced:= pAnalysis^.ipVirtualInputSource.nV1_uProcessedCount;
fbM1_PackMLOverallEquipmentEffectivenessOEE.nDefectiveUnits:= pAnalysis^.ipVirtualInputSource.nV1_uDefectiveCount;


//Module fbM2_ProductionTimingAnalysis1Ch
fbM2_ProductionTimingAnalysis1Ch.tTimestamp:= pAnalysis^.ipVirtualInputSource.tTimestamp;
fbM2_ProductionTimingAnalysis1Ch.bDataIn:= pAnalysis^.ipVirtualInputSource.bV1_bProductionMode;


//Module fbM3_PieChart
fbM3_PieChart.nDataInCh1:= pAnalysis^.ipVirtualInputSource.nV1_uMetalCount;

fbM3_PieChart.fDataInCh2:= fInput_01;

//Module fbM4_ThresholdClassifier1Ch
fbM4_ThresholdClassifier1Ch.tTimestamp:= pAnalysis^.ipVirtualInputSource.tTimestamp;

//Module fbM5_PlasticMathOperation
fbM5_PlasticMathOperation.nDataInCh1:= pAnalysis^.ipVirtualInputSource.nV1_uProcessedCount;
fbM5_PlasticMathOperation.nDataInCh2:= pAnalysis^.ipVirtualInputSource.nV1_uMetalCount;


//Module fbM6_PreventiveMaintenanceLifetimeAnalysis
fbM6_PreventiveMaintenanceLifetimeAnalysis.tTimestamp:= pAnalysis^.ipVirtualInputSource.tTimestamp;
fbM6_PreventiveMaintenanceLifetimeAnalysis.nDataIn:= pAnalysis^.ipVirtualInputSource.nV1_lScheduledTime;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetHMI" Id="34ca7628-fb60-4147-a872-d4874014f1cb">
      <Declaration><![CDATA[METHOD SetHMI : BOOL
VAR_INPUT
	nContent: DINT;
	pContent: PVOID;
	bHMIReinit: BOOL;
END_VAR
VAR
	pHMI_C1_Network: POINTER TO ST_HMI_C1_Network;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SetHMI:= FALSE;

CASE nContent OF
	1:
		pHMI_C1_Network:= pContent;


		pHMI_C1_Network^.fN1_N1_fInput_01:= fInput_01;
		pHMI_C1_Network^.fN1_N1_fPlastic_Count:= fPlastic_Count;
END_CASE

SetHMI:= TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>