<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Productversion="">
  <POU Name="FB_N1_Network" Id="d2e87878-d98f-4f8e-8f76-b295c10ad833" SpecialFunc="None">
    <Declaration><![CDATA[//Analytics Network "Network" with ID: 1
FUNCTION_BLOCK FB_N1_Network
VAR_OUTPUT
	bError: BOOL;
	ipTcResult: I_TcMessage := fbTcMsgSuccess;
END_VAR
VAR
	fbTcMsgSuccess: FB_TcMessageSuccess;
	
	//Modules
	fbM1_ProductionTimingAnalysis1Ch: FB_N1_M1_ProductionTimingAnalysis1Ch;
	fbM2_MaintenanceTimingAnalysis1Ch: FB_N1_M2_MaintenanceTimingAnalysis1Ch;
	fbM3_ParetoAnalysis: FB_N1_M3_ParetoAnalysis;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Call" Id="de440553-a6a9-448e-89c5-a5ef9e2fb796">
      <Declaration><![CDATA[METHOD Call : BOOL
VAR_INPUT
	pAnalysis: POINTER TO FB_Analysis;
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ValueMapping(pAnalysis);

//The Timing Analysis 1Ch measures time difference between on- and off-periods and counts the amount of on-periods. The on-period starts when the condition of operator and threshold is met. Optional a boolean signal for Enable Execution can be selected, so that the algorithm is just active if the value of the selected signal is TRUE.
fbM1_ProductionTimingAnalysis1Ch.Call(pAnalysis^.nContext);

//The Timing Analysis 1Ch measures time difference between on- and off-periods and counts the amount of on-periods. The on-period starts when the condition of operator and threshold is met. Optional a boolean signal for Enable Execution can be selected, so that the algorithm is just active if the value of the selected signal is TRUE.
fbM2_MaintenanceTimingAnalysis1Ch.Call(pAnalysis^.nContext);

//The Pareto Analysis combines data of multiple input channels to realize a pareto chart.
fbM3_ParetoAnalysis.nDataInCh1:= fbM1_ProductionTimingAnalysis1Ch.fbTimeOnTotal.nRaw;
fbM3_ParetoAnalysis.nDataInCh2:= fbM2_MaintenanceTimingAnalysis1Ch.fbTimeOnTotal.nRaw;
fbM3_ParetoAnalysis.Call(pAnalysis^.nContext);


//Error Handling
IF fbM1_ProductionTimingAnalysis1Ch.bError THEN
	bError:= TRUE;
	ipTcResult:= fbM1_ProductionTimingAnalysis1Ch.ipTcResult;
ELSIF fbM2_MaintenanceTimingAnalysis1Ch.bError THEN
	bError:= TRUE;
	ipTcResult:= fbM2_MaintenanceTimingAnalysis1Ch.ipTcResult;
ELSIF fbM3_ParetoAnalysis.bError THEN
	bError:= TRUE;
	ipTcResult:= fbM3_ParetoAnalysis.ipTcResult;
ELSE
	bError:= FALSE;
	ipTcResult:= fbTcMsgSuccess;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="65fe80f7-7c86-463b-aeed-02dcc9c7c491">
      <Declaration><![CDATA[METHOD Reset : BOOL
VAR
	bResult: BOOL := TRUE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bResult:= bResult AND fbM1_ProductionTimingAnalysis1Ch.Reset();
bResult:= bResult AND fbM2_MaintenanceTimingAnalysis1Ch.Reset();
bResult:= bResult AND fbM3_ParetoAnalysis.Reset();
Reset:= bResult;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ValueMapping" Id="58b9c9a0-04d9-43f4-94b9-5597218aab01">
      <Declaration><![CDATA[METHOD PRIVATE ValueMapping : BOOL
VAR_INPUT
	pAnalysis: POINTER TO FB_Analysis;
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//Module fbM1_ProductionTimingAnalysis1Ch
fbM1_ProductionTimingAnalysis1Ch.tTimestamp:= pAnalysis^.ip127_0_0_1_PackMLPlcStream1_10_00ms.tTimestamp;
fbM1_ProductionTimingAnalysis1Ch.nDataIn:= pAnalysis^.ip127_0_0_1_PackMLPlcStream1_10_00ms.nV1_UnitModeCurrent;


//Module fbM2_MaintenanceTimingAnalysis1Ch
fbM2_MaintenanceTimingAnalysis1Ch.tTimestamp:= pAnalysis^.ip127_0_0_1_PackMLPlcStream1_10_00ms.tTimestamp;
fbM2_MaintenanceTimingAnalysis1Ch.nDataIn:= pAnalysis^.ip127_0_0_1_PackMLPlcStream1_10_00ms.nV1_UnitModeCurrent;


//Module fbM3_ParetoAnalysis
fbM3_ParetoAnalysis.tTimestamp:= pAnalysis^.ip127_0_0_1_PackMLPlcStream1_10_00ms.tTimestamp;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>