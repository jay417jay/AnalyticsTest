<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4018.5">
  <POU Name="FB_Generic" Id="{6731ada0-e7f3-4a4b-8534-5c6189c275ad}" SpecialFunc="None">
    <Declaration><![CDATA[//the functionblock FB_Generick is transmitted to every machineunit
FUNCTION_BLOCK FB_Generic IMPLEMENTS ITF_UnitState
VAR_INPUT
	eModeCommand			: DINT;									//Mode from superior Unit
	eCommand				: E_PMLCommand := ePMLCommand_Abort;	//Command for a new state from superior unit
END_VAR
VAR_OUTPUT
	eMode					: DINT;									//Actual mode of the Unit
	eState					: E_PMLState (*:= ePMLState_Aborted*) ;	//Actual state of the Unit
	bUndefinedDone			: BOOL;									//When the SPS is started, the first state is Undefiend. bUndefined is TRUE, when the method Undefined has succesful finished
	bInvalidModeCommandOut	: BOOL;
	bChangeIntoProduction	: BOOL;
END_VAR
VAR
	fbUnitModeManager		: PML_UnitModeManager;					//The PML_UnitModeManager manage the Modechanges
	fbStateMachine 			: PML_StateMachine;						//The PML_StateMachine mangae the Statechanges
	
	nStateModeChange		: INT	:= 0;							//Variable to handle the modechange
	nLastState				: E_PMLState;							//Variable to store last state
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE nStateModeChange OF
0:
	//Waiting for user request
	bChangeIntoProduction:= FALSE;
	IF  bButtonProductionReq AND (PackTags.Command.UnitMode = ePMLProtUnitMode_Production) AND (PackTags.Status.UnitModeCurrent = ePMLProtUnitMode_Invalid) THEN
			nStateModeChange	:= 1;
	ELSIF  PackTags.Command.UnitModeChangeRequest AND (PackTags.Command.UnitMode <> ePMLProtUnitMode_Production) THEN
			nStateModeChange	:= 1;
	ELSIF  bButtonProductionReq AND (PackTags.Command.UnitMode = ePMLProtUnitMode_Production) AND (PackTags.Status.UnitModeCurrent <> ePMLProtUnitMode_Production) THEN
			nStateModeChange	:= 3;
	END_IF
1:
	//Starting UnitModeManager 
	fbUnitModeManager.bExecute				:= TRUE;
	fbUnitModeManager.eModeCommand			:= eModeCommand;
	PackTags.Status.UnitModeChangeInProcess	:= TRUE;

	IF fbUnitModeManager.bDone THEN
		fbUnitModeManager.bExecute	:= FALSE;
		bInvalidModeCommandOut		:= FALSE;
		nStateModeChange			:= 0;
		bChangeIntoProduction		:= FALSE;
		PackTags.Status.UnitModeChangeInProcess	:= FALSE;
	ELSIF fbUnitModeManager.bError THEN
		bInvalidModeCommandOut		:= TRUE;
		fbUnitModeManager.bExecute	:= FALSE;
		nLastState					:= PackTags.Status.StateCurrent;
		nLastState					:= PackTags.Status.StateCurrent;
		nStateModeChange			:= 2;
		bChangeIntoProduction		:= FALSE;
		PackTags.Status.UnitModeChangeInProcess	:= FALSE;
	END_IF
2:
	//ErrorHanddling
	IF  PackTags.Command.UnitModeChangeRequest THEN
		nStateModeChange:=0;
		bInvalidModeCommandOut		:= FALSE;
	ELSIF nLastState<> PackTags.Status.StateCurrent THEN
		bInvalidModeCommandOut		:= FALSE;
	END_IF
	
3:
	//state to check, if command 'Porduction' is valid
	IF (PackTags.Status.StateCurrent = ePMLState_Aborted OR PackTags.Status.StateCurrent = ePMLState_Stopped OR PackTags.Status.StateCurrent = ePMLState_Idle) THEN
		bChangeIntoProduction		:= TRUE;
		IF stChangeIntoProduction.bYes OR stChangeIntoProduction.bYesReset THEN
			nStateModeChange			:= 1;		
		ELSIF stChangeIntoProduction.bNo THEN
			nStateModeChange			:= 0;
		END_IF
	ELSE
		nStateModeChange:= 2;
		bInvalidModeCommandOut		:= TRUE;
		nLastState					:= PackTags.Status.StateCurrent;
	END_IF
END_CASE


fbUnitModeManager(									
	eState			:= eState,
	eModeStatus		=> eMode,
	bDone			=> ,
	bError			=> ,
	nErrorId		=> );


IF fbUnitModeManager.eModeStatus <>  0 THEN
	//Calling the StateMachine, when there is a valid Mode
	fbStateMachine(
		eMode				:= eMode, 				
		eCommand			:= eCommand,			
		stSubUnitInfoRef	:= ,
		stOptions			:= , 
		eState				=> eState, 				
		bError				=> , 
		nErrorID			=> );
END_IF

//One of the methods is executing  by the actual state
CASE eState OF
	ePMLState_Undefined:
		M_Undefined();
	ePMLState_Clearing:
		M_Clearing();
	ePMLState_Stopped:
		M_Stopped();
	ePMLState_Starting:
		M_Starting();
	ePMLState_Idle:
		M_Idle();
	ePMLState_Suspended:
		M_Suspended();
	ePMLState_Execute:
		M_Execute();
	ePMLState_Stopping:
		M_Stopping();
	ePMLState_Aborting:
		M_Aborting();
	ePMLState_Aborted:
		M_Aborted();
	ePMLState_Holding:
		M_Holding();
	ePMLState_Held:
		M_Held();
	ePMLState_Unholding:
		M_Unholding();
	ePMLState_Suspending:
		M_Suspending();
	ePMLState_Unsuspending:
		M_Unsuspending();
	ePMLState_Resetting:
		M_Resetting();
	ePMLState_Completing:
		M_Completing();
	ePMLState_Complete:
		M_Complete();
END_CASE]]></ST>
    </Implementation>
    <Method Name="M_Aborted" Id="{68860e43-9d33-4150-aa1b-f9759c02f24b}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Aborted'}
METHOD M_Aborted
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Aborting" Id="{c83e3bc9-e145-46e3-9c33-ce95d5c21ca1}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Aborting'}
METHOD M_Aborting
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Clearing" Id="{0f37ef63-2c8e-48f6-9e84-c77671458548}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Clearing'}
METHOD M_Clearing
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Complete" Id="{18ab3b63-6319-4aa4-aef3-33841844edc2}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Complete'}
METHOD M_Complete
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Completing" Id="{7b03ef7e-4ee3-4746-bd08-8890665aa131}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Completing'}
METHOD M_Completing
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Execute" Id="{825be72c-aa8e-40b9-8699-374335e35ea2}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Execute'}
METHOD M_Execute
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Held" Id="{4a3f8bde-f1b8-4aee-9633-d2a338539321}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Held'}
METHOD M_Held
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Holding" Id="{9d5b10bb-229a-4335-9d36-a5f1fe33f650}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Holding'}
METHOD M_Holding
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Idle" Id="{3ab71075-3900-414e-8650-b0c834b4c865}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Idle'}
METHOD M_Idle
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Resetting" Id="{bb8cf386-5782-4629-a5b7-1dc8d7ce9545}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Resetting'}
METHOD M_Resetting
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Starting" Id="{96719522-d113-4a0a-a836-fdaea104eb56}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Starting'}
METHOD M_Starting
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StateComplete" Id="{c69fff04-ca0a-403e-a712-c6501809dcc9}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_StateComplete'}
METHOD M_StateComplete
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//the actual state is completed
fbStateMachine.M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stopped" Id="{8465c14a-a7ea-401c-a764-b99b72cc50df}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Stopped'}
METHOD M_Stopped
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stopping" Id="{d6c99805-59c1-43c7-97aa-78d67dd6d46a}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Stopping'}
METHOD M_Stopping
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Suspended" Id="{27417895-9da2-442c-922d-a8df9c1cd3da}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Suspended'}
METHOD M_Suspended
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Suspending" Id="{d5bfbd74-5739-40d2-8690-87c86491feb7}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Suspending'}
METHOD M_Suspending
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Undefined" Id="{f70e73ab-a871-4e76-9350-87ae2d7dd598}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Undefined'}
METHOD M_Undefined
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Unholding" Id="{71d313b4-5bc5-4bff-b141-130fd447b290}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Unholding'}
METHOD M_Unholding
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Unsuspending" Id="{fc5e3636-61b8-4541-b313-0cb253acaa8f}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Unsuspending'}
METHOD M_Unsuspending
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_StateComplete();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>