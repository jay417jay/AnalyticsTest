var TcHmi;!function(t){!function(t){!function(t){class s extends t.LayoutElement{get userLayoutChangesIdx(){return this._userLayoutChangesIdx}set userLayoutChangesIdx(s){this._userLayoutChangesIdx=s,this.dispatchEvent(new CustomEvent(t.EventNames.updateRedoUndoButton))}constructor(t,s){super(t,s),this.userLayoutChanges=[],this._userLayoutChangesIdx=0}reset(){this.userLayoutChanges=[],this.userLayoutChangesIdx=0}addNewLayoutChange(t){const s=JSON.stringify(t);s!=this.userLayoutChanges[this.userLayoutChanges.length-1]&&(this.userLayoutChangesIdx<this.userLayoutChanges.length-1&&(this.userLayoutChanges=this.userLayoutChanges.slice(0,this.userLayoutChangesIdx+1)),this.userLayoutChanges.push(s),this.userLayoutChangesIdx=this.userLayoutChanges.length-1)}undoLastAction(){this.canUndo&&(this.userLayoutChangesIdx--,this.__applyUndoRedoLayout())}redoLastAction(){this.canRedo&&(this.userLayoutChangesIdx++,this.__applyUndoRedoLayout())}__applyUndoRedoLayout(){this.__layoutProps.isRedoUndoAction=!0;const s=this.userLayoutChanges[this.userLayoutChangesIdx];null!=s&&(this.__layoutProps.requestedLayout=s,this.__layoutProps.isUserSpecificLayout=!0,this.dispatchEvent(new CustomEvent(t.EventNames.createLayout))),this.__layoutProps.isRedoUndoAction=!1}get canUndo(){return this.userLayoutChangesIdx>0}get canRedo(){return this.userLayoutChangesIdx<this.userLayoutChanges.length-1}}t.UndoRedoManager=s}(t.Analytics||(t.Analytics={}))}(t.Controls||(t.Controls={}))}(TcHmi||(TcHmi={}));