var TcHmi;!function(e){!function(t){!function(t){class i extends e.Controls.Analytics.AnalyticsControl{constructor(e,t,i){super(e,t,i),this.__minValue=0,this.__maxValue=0,this.__onResized=()=>(e,t)=>{super.__onResizedBase(e,t)}}__previnit(){if(super.__previnit(),0==this.__hasLicense)return;this.__defaultWidth=310,this.__defaultHeight=310,this.__elRadialGauge=this.__elTemplateContainer.find("radial-gauge")[0],this.__elTachometerHmi=e.Controls.get(this.__id+"_TcHmiTachometer");const i=[new t.EditAreaItem("","Tachometer",'url("/Beckhoff.TwinCAT.HMI.Analytics.Controls/Tachometer/Icons/16x16.png")',null,()=>{this.__setTachometerDesignPersistent("Tachometer")}),new t.EditAreaItem("","Radial Gauge",'url("/Beckhoff.TwinCAT.HMI.Analytics.Controls/Tachometer/Icons/RadialGauge.png")',null,()=>{this.__setTachometerDesignPersistent("Radial Gauge")})];this.__editAreaItems.push(new t.EditAreaItem("","Design",'url("/Beckhoff.TwinCAT.HMI.Analytics.Controls/Tachometer/Icons/16x16.png")',null,null,i)),this.__addEventListeners()}__init(){let e=[new t.Property(this,"DefaultColor","Default Color",t.E_DataType.SOLIDCOLOR),new t.Property(this,"OkColor","Okay Color",t.E_DataType.SOLIDCOLOR),new t.Property(this,"WarningColor","Warning Color",t.E_DataType.SOLIDCOLOR),new t.Property(this,"AlarmColor","Alarm Color",t.E_DataType.SOLIDCOLOR),new t.Property(this,"TachometerDesign","Design",t.E_DataType.COMBOBOX,{comboBoxOptions:[{value:"Tachometer",displayName:"Tachometer"},{value:"Radial Gauge",displayName:"Radial Gauge"}]})];super.setEditableProperties(e),super.__init()}__attach(){super.__attach(),this.__calculate()}__detach(){super.__detach()}destroy(){this.__keepAlive||super.destroy()}setTachometerDesign(t){let i=e.ValueConverter.toString(t);null===i&&(i=this.getAttributeDefaultValueInternal("TachometerDesign")),i!==this.__tachometerDesing&&(this.__tachometerDesing=i,e.EventProvider.raise(`${this.__id}.onFunctionResultChanged`,["getTachometerDesign"]),this.__processTachometerDesign())}getTachometerDesign(){return this.__tachometerDesing}__processTachometerDesign(){const e=this.__tachometerDesing===l.TACHOMETER;this.__elTachometerHmi.getElement().toggleClass(this.COLLAPSE_CLASS,!e),this.__elRadialGauge.classList.toggle(this.COLLAPSE_CLASS,e)}setValue(t){let i=e.ValueConverter.toNumber(t);null===i&&(i=this.getAttributeDefaultValueInternal("Value")),i!==this.__value&&(this.__value=i,e.EventProvider.raise(`${this.__id}.onFunctionResultChanged`,["getValue"]),this.__processValue())}getValue(){return this.__value}__processValue(){this.__autoRange(),this.__calculate()}setUnit(t){let i=e.ValueConverter.toString(t);null===i&&(i=this.getAttributeDefaultValueInternal("Unit")),i!==this.__unit&&(this.__unit=i,e.EventProvider.raise(`${this.__id}.onFunctionResultChanged`,["getUnit"]),this.__processUnit())}getUnit(){return this.__unit}__processUnit(){this.__elTachometerHmi.setUnit(this.__unit),this.__elRadialGauge.unit=this.__unit}setLevelOkWarning(t){let i=e.ValueConverter.toNumber(t);null===i&&(i=this.getAttributeDefaultValueInternal("LevelOkWarning")),i!==this.__levelOkWarning&&(this.__levelOkWarning=i,e.EventProvider.raise(`${this.__id}.onFunctionResultChanged`,["getLevelOkWarning"]),this.__processLevelOkWarning())}getLevelOkWarning(){return this.__levelOkWarning}__processLevelOkWarning(){this.__calculate()}setLevelWarningAlarm(t){let i=e.ValueConverter.toNumber(t);null===i&&(i=this.getAttributeDefaultValueInternal("LevelWarningAlarm")),i!==this.__levelWarningAlarm&&(this.__levelWarningAlarm=i,e.EventProvider.raise(`${this.__id}.onFunctionResultChanged`,["getLevelWarningAlarm"]),this.__processLevelWarningAlarm())}getLevelWarningAlarm(){return this.__levelWarningAlarm}__processLevelWarningAlarm(){this.__calculate()}setOkColor(t){let i=e.ValueConverter.toObject(t);null===i&&(i=this.getAttributeDefaultValueInternal("OkColor")),i!==this.__okColor&&(this.__okColor=i,e.EventProvider.raise(`${this.__id}.onFunctionResultChanged`,["getOkColor"]),this.__processOkColor())}getOkColor(){return this.__okColor}__processOkColor(){this.__calculate()}setWarningColor(t){let i=e.ValueConverter.toObject(t);null===i&&(i=this.getAttributeDefaultValueInternal("WarningColor")),i!==this.__warningColor&&(this.__warningColor=i,e.EventProvider.raise(`${this.__id}.onFunctionResultChanged`,["getWarningColor"]),this.__processWarningColor())}getWarningColor(){return this.__warningColor}__processWarningColor(){this.__calculate()}setAlarmColor(t){let i=e.ValueConverter.toObject(t);null===i&&(i=this.getAttributeDefaultValueInternal("AlarmColor")),i!==this.__alarmColor&&(this.__alarmColor=i,e.EventProvider.raise(`${this.__id}.onFunctionResultChanged`,["getAlarmColor"]),this.__processAlarmColor())}getAlarmColor(){return this.__alarmColor}__processAlarmColor(){this.__calculate()}setDefaultColor(t){let i=e.ValueConverter.toObject(t);null===i&&(i=this.getAttributeDefaultValueInternal("DefaultColor")),i!==this.__defaultColor&&(this.__defaultColor=i,e.EventProvider.raise(`${this.__id}.onFunctionResultChanged`,["getDefaultColor"]),this.__processDefaultColor())}getDefaultColor(){return this.__defaultColor}__processDefaultColor(){this.__calculate()}setNeddleColor(t){let i=e.ValueConverter.toObject(t);null===i&&(i=this.getAttributeDefaultValueInternal("NeddleColor")),i!==this.__neddleColor&&(this.__neddleColor=i,e.EventProvider.raise(`${this.__id}.onFunctionResultChanged`,["getNeddleColor"]),this.__processNeddleColor())}getNeddleColor(){return this.__neddleColor}__processNeddleColor(){this.__elTachometerHmi.setNeedleColor(this.__neddleColor),this.__elRadialGauge.cursorColor=this.__neddleColor.color}__calculate(){if(!this.__isAttached)return;const e=this.__getRanges();if(0!=this.__minValue||0!=this.__maxValue)if(this.__tachometerDesing===l.TACHOMETER){this.__elTachometerHmi.setMinValue(this.__minValue),this.__elTachometerHmi.setMaxValue(this.__maxValue),this.__elTachometerHmi.setRange(e);const t=this.__getTickDefinition();this.__elTachometerHmi.setTickDefinition(t),this.__elTachometerHmi.setLabelRange(t.mainTickRange);let i=this.__elTachometerHmi.getValue();this.__elTachometerHmi.setValue(--i),this.__elTachometerHmi.setValue(parseFloat(this.__value.toFixed(this.__amountDecimals)))}else this.__elRadialGauge.minValue=this.__minValue,this.__elRadialGauge.maxValue=this.__maxValue,this.__elRadialGauge.ranges=e,this.__elRadialGauge.value=this.__value}__getRanges(){const e=this.__levelOkWarning>this.__levelWarningAlarm;let i,l,a,r,o;return null==this.__levelOkWarning||null==this.__levelWarningAlarm?(i=this.__defaultColor.color,l=this.__defaultColor.color,a=this.__defaultColor.color,r=this.__maxValue,o=this.__maxValue):(l=this.__warningColor.color,e?(i=this.__alarmColor.color,a=this.__okColor.color,r=this.__levelWarningAlarm,o=this.__levelOkWarning):(i=this.__okColor.color,a=this.__alarmColor.color,r=this.__levelOkWarning,o=this.__levelWarningAlarm),this.__minValue>=r&&(this.__minValue=t.Utilities.nextStep(r,!1)),this.__maxValue<=o&&(this.__maxValue=t.Utilities.nextStep(o,!0))),[{color:{color:i},start:this.__minValue,end:r},{color:{color:l},start:r,end:o},{color:{color:a},start:o,end:this.__maxValue}]}__getTickDefinition(){const e=(this.__maxValue-this.__minValue)/5;return{mainTickRange:e,subTickRange:e/4}}__autoRange(){this.__value<this.__minValue&&(this.__minValue=t.Utilities.nextStep(this.__value,!1)),this.__value>this.__maxValue&&(this.__maxValue=t.Utilities.nextStep(this.__value,!0))}__setTachometerDesignPersistent(e){const i=new t.Property(this,"TachometerDesign","Design",t.E_DataType.STRING);this.__setPropertyPersistent(i,e)}__processColor(){super.__processColor(),this.__isAttached&&(this.__elTachometerHmi.setValueColor(this.__solidFontColor),this.__elTachometerHmi.setLabelColor(this.__solidFontColor),this.__elTachometerHmi.setUnitColor(this.__solidFontColor),this.__elTachometerHmi.setTickColor(this.__solidFontColor),this.__elRadialGauge.fontColor=this.__solidFontColor.color,this.__calculate())}__addEventListeners(){}}let l;t.Tachometer=i,function(e){e.TACHOMETER="Tachometer",e.RadialGauge="RadialGauge"}(l||(l={}))}(t.Analytics||(t.Analytics={}))}(e.Controls||(e.Controls={}))}(TcHmi||(TcHmi={})),TcHmi.Controls.registerEx("Tachometer","TcHmi.Controls.Analytics",TcHmi.Controls.Analytics.Tachometer);